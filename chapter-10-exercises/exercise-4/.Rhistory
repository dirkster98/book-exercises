is.list(shark_length$goblin)
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades$is_participant <- "Yes"
total_after_tax <- total_with_discount + sales_tax*(total_with_discount)
my_age <- 21
my_name <- "Ethan"
make_introduction <- function(name, age){
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
my_intro<-make_introduction(my_name, my_age)
print(my_intro)
casual_intro<-sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
capital_intro<-str_to_upper(my_intro)
print(capital_intro)
casual_intro<-sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
capital_intro<-str_to_upper(my_intro)
print(capital_intro)
library("stringr")
capital_intro<-str_to_upper(my_intro)
print(capital_intro)
intro_e_count<-str_count(my_intro, "e")
print(intro_e_count)
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
library("stringr")
my_age <- 21
my_name <- "Ethan"
make_introduction <- function(name, age){
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_upper(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
books <- c("Harry Potter And The Prisoner of Askaban", "How To Not Die Alone", "The House Next Door",
"The Velvet Rage", "1st To Die", "Malcolm X Speeches")
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books,"is a great read!")
print(book_reviews)
remove_book <- function(book_titles,index){
new_vector <- books[-index]
return(new_vector)
}
books_without_five <- remove_book(books,5)
print(books_without_five)
long_titles <- books[books>15]
print(long_titles)
books <- c("Harry Potter And The Prisoner of Askaban", "How To Not Die Alone", "The House Next Door",
"The Velvet Rage", "1st", "Malcolm X Speeches")
long_titles <- books[books>15]
print(long_titles)
books <- c("Harry Potter And The Prisoner of Askaban", "How To Not Die Alone", "The House Next Door",
"The Velvet Rage", "1st", "Malcolm X Speeches")
long_titles <- books[books>15]
print(long_titles)
long_titles <- books[nchar(books)>15]
print(long_titles)
books <- c("Harry Potter And The Prisoner of Askaban", "How To Not Die Alone", "The House Next Door",
"The Velvet Rage", "1st To Die", "Malcolm X Speeches")
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books,"is a great read!")
print(book_reviews)
#Returns new vector with given book titles, but with tite at the specific index removed
remove_book <- function(book_titles,index){
new_vector <- books[-index]
return(new_vector)
}
books_without_five <- remove_book(books,5)
print(books_without_five)
long_titles <- books[nchar(books)>15]
print(long_titles)
numbers <- 1:201
squared_numbers <- numbers*numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
print(squared_median)
perfect_squares <- numbers[sqrt(numbers)==round(sqrt(numbers))]
print(perfect_squares)
dates <- c("03/21/20")
spring_break <- as.Date(dates, "%m/%d/%y")
#converts 03/21/20 ---> 2020-03-21
today <- Sys.Date()
change_year <- function(date,year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string,5,10)
date_in_new_year <- paste(year,month_and_day)
return(as.Date(as.character(date_in_new_year),format = "%Y -%m-%d"))
}
spring_break_2025 <- change_year(spring_break,2025)
print(spring_break_2025)
date_has_passed <- function(date){
dates_passed <- Sys.Date()-date > 0
return(dates_passed)
}
test <- date_has_passed(as.Date("2020-01-23","%Y-%m-%d"))
print(test)
test <- date_has_passed(as.Date(spring_break,"%Y-%m-%d"))
print(test)
change_year <- function(date,year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string,5,10)
date_in_new_year <- paste(year,month_and_day)
return(as.Date(as.character(date_in_new_year),format = "%Y -%m-%d"))
}
spring_break_2025 <- change_year(spring_break,2025)
print(spring_break_2025)
class(spring_break_2025)
date_has_passed <- function(date){
dates_passed <- Sys.Date()-date > 0
return(dates_passed)
}
test <- date_has_passed(as.Date(spring_break,"%Y-%m-%d"))
print(test)
test <- date_has_passed(as.Date("2020-01-23","%Y-%m-%d"))
print(test)
test <- date_has_passed(as.Date("2020-01-23","%Y-%m-%d"))
print(test)
birthdays <- list(Ethan = as.Date("1998-12-19","%Y-%m-%d"),Jordan = as.Date("1998-12-19","%Y-%m-%d"),Jacqueline = as.Date("1963-12-23","%Y-%m-%d"),
Jeff = as.Date("1965-12-17","%Y-%m-%d"), Jayden = as.Date("2014-01-17","%Y-%m-%d"))
print(birthdays)
get_next_birthday <- function(birthdate){
birthday <- change_year(birthdate,2020)
already_occured_2020 <- date_has_passed(birthday)
if (already_occured_2020 == TRUE){
birthday <- change_year(birthdate,2021)
}
return(birthday)
}
test_get_next_birthday <- get_next_birthday(birthdays$Jayden)
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
test_get_next_birthday <- get_next_birthday(birthdays$Jayden)
print(test_get_next_birthday)
test_get_next_birthday <- get_next_birthday(birthdays$Jeff)
print(test_get_next_birthday)
test_get_next_birthday <- get_next_birthday(birthdays$Jayden)
print(test_get_next_birthday)
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
library("stringr")
my_age <- 21
my_name <- "Ethan"
#3
#takes a name and age and returns a character string with that information included
make_introduction <- function(name, age){
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
#4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_upper(my_intro)
print(capital_intro)
#7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#1
# Your script for Part 2 goes here (and delete this comment!)
books <- c("Harry Potter And The Prisoner of Askaban", "How To Not Die Alone", "The House Next Door",
"The Velvet Rage", "1st To Die", "Malcolm X Speeches")
#2
top_three_books <- books[1:3]
print(top_three_books)
#3
book_reviews <- paste(books,"is a great read!")
print(book_reviews)
#4
#Returns new vector with given book titles, but with tite at the specific index removed
remove_book <- function(book_titles,index){
new_vector <- books[-index]
return(new_vector)
}
#5
books_without_five <- remove_book(books,5)
print(books_without_five)
#6
long_titles <- books[nchar(books)>15]
print(long_titles)
numbers <- 1:201
#2
squared_numbers <- numbers*numbers
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
print(squared_median)
#5
perfect_squares <- numbers[sqrt(numbers)==round(sqrt(numbers))]
print(perfect_squares)
#1
dates <- c("03/21/20")
spring_break <- as.Date(dates, "%m/%d/%y")
#converts 03/21/20 ---> 2020-03-21
#2
today <- Sys.Date()
class(spring_break)
#4
#Accepts date-type value and year(number). Returns date-type value that represents
#argument date in the given year
change_year <- function(date,year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string,5,10)
date_in_new_year <- paste(year,month_and_day)
return(as.Date(as.character(date_in_new_year),format = "%Y -%m-%d"))
}
#5
#Accepts date-type value and year(number). Returns date-type value that represents
#argument date in the given year
change_year <- function(date,year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string,5,10)
date_in_new_year <- paste(year,month_and_day)
return(as.Date(as.character(date_in_new_year),format = "%Y -%m-%d"))
}
#6
spring_break_2025 <- change_year(spring_break,2025)
print(spring_break_2025)
class(spring_break_2025)
#7
#Accepts date-type value as argument and returns boolean representing whether that
#date has occured or not
date_has_passed <- function(date){
dates_passed <- Sys.Date()-date > 0
return(dates_passed)
}
test_date_has_passed <- date_has_passed(as.Date("2020-01-23","%Y-%m-%d"))
print(test_date_has_passed)
test_date_has_passed <- date_has_passed(as.Date("2020-01-22","%Y-%m-%d"))
print(test_date_has_passed)
test_date_has_passed <- date_has_passed(as.Date("2020-01-23","%Y-%m-%d"))
print(test_date_has_passed)
#9
birthdays <- list(Ethan = as.Date("1998-12-19","%Y-%m-%d"),Jordan = as.Date("1998-12-19","%Y-%m-%d"),Jacqueline = as.Date("1963-12-23","%Y-%m-%d"),
Jeff = as.Date("1965-12-17","%Y-%m-%d"), Jayden = as.Date("2014-01-17","%Y-%m-%d"))
print(birthdays)
#10
#Accepts a date-type value and representing someones birthday and returns the date of the
#persons next birthday
get_next_birthday <- function(birthdate){
birthday <- change_year(birthdate,2020)
already_occured_2020 <- date_has_passed(birthday)
if (already_occured_2020 == TRUE){
birthday <- change_year(birthdate,2021)
}
return(birthday)
}
#11
test_get_next_birthday <- get_next_birthday(birthdays$Jayden)
#12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
days_to_break <- spring_break-today
days_to_break <- spring_break-today
print(days_to_break)
#5
#Accepts date-type value and year(number). Returns date-type value that represents
#argument date in the given year
change_year <- function(date,year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string,5,10)
date_in_new_year <- paste(year,month_and_day)
return(as.Date(as.character(date_in_new_year),format = "%Y -%m-%d"))
}
#6
spring_break_2025 <- change_year(spring_break,2025)
print(spring_break_2025)
class(spring_break_2025)
#7
#Accepts date-type value as argument and returns boolean representing whether that
#date has occured or not
date_has_passed <- function(date){
dates_passed <- Sys.Date()-date > 0
return(dates_passed)
}
#8
test_date_has_passed <- date_has_passed(as.Date("2020-01-23","%Y-%m-%d"))
print(test_date_has_passed)
#9
birthdays <- list(Ethan = as.Date("1998-12-19","%Y-%m-%d"),Jordan = as.Date("1998-12-19","%Y-%m-%d"),Jacqueline = as.Date("1963-12-23","%Y-%m-%d"),
Jeff = as.Date("1965-12-17","%Y-%m-%d"), Jayden = as.Date("2014-01-17","%Y-%m-%d"))
print(birthdays)
#10
#Accepts a date-type value and representing someones birthday and returns the date of the
#persons next birthday
get_next_birthday <- function(birthdate){
birthday <- change_year(birthdate,2020)
already_occured_2020 <- date_has_passed(birthday)
if (already_occured_2020 == TRUE){
birthday <- change_year(birthdate,2021)
}
return(birthday)
}
test_get_next_birthday <- get_next_birthday(birthdays$Jayden)
#12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
source('~/Desktop/a2-core-skills-dirkster98/assignment.R')
employees<-c(paste("Employee",1:100))
employees<-c(paste("Employee",1:100))
employees<-paste("Employee",1:100)
print(employees)
?runif
salaries_2017 <- runif(100, 4000, 5000)
adjustments <- runif(100, -5000, 10000)
salaries <- data.frame(employees, salaries_2017, adjustments)
salaries <- data.frame(employees, salaries_2017, salaries_2018, adjustments)
salaries_2018 <- runif(100, 3500, 5500)
salaries <- data.frame(employees, salaries_2017, salaries_2018, adjustments)
adjustments_2018 <- runif(100, -3500, 11000)
salaries <- data.frame(employees, salaries_2017, adjustments_2017, salaries_2018, adjustments_2018)
adjustments_2017 <- runif(100, -5000, 10000)
salaries <- data.frame(employees, salaries_2017, adjustments_2017, salaries_2018, adjustments_2018)
source('~/Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salaries_2018
salaries$salaries_2018<-runif(100, 4000, 5000)
salaries <- data.frame(employees, salaries_2017, adjustments)
salaries$salaries_2018<-runif(100, 4000, 5000)
salaries$salaries_2018<-runif(100, 4000, 5000)
print(salaries)
salaries$salaries_2018<-salaries$salaries_2017 + salaries$adjustments
View(salaries)
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
calc_survival_rate <- function(ticket_class){
ticket_class<-titanic_df[titanic_df$Class == "ticket_class",]
}
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
calc_survival_rate <- function(ticket_class){
ticket_class<-titanic_df[titanic_df$Class == "ticket_class",]
}
adult_males <- ticket_class[ticket_class$Age == "Adult" & ticket_class$Sex == "Male"]
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
calc_survival_rate <- function(ticket_class){
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male"]
}
View(adult_males)
View(given_ticket_class)
ticket_class = "2nd"
calc_survival_rate <- function(ticket_class){
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male"]
}
View(given_ticket_class)
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
ticket_class = "2nd"
calc_survival_rate <- function(ticket_class){
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male",]
#View(adult_males)
}
View(given_ticket_class)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
View(children)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
View(children)
children <- titanic_df[titanic_df$Age=="Child", stringsAsFactors = FALSE]
View(children)
children <- titanic_df[titanic_df$Age=="Child", stringsAsFactors = FALSE]
View(children)
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
children <- titanic_df[titanic_df$Age=="Child", stringsAsFactors = FALSE]
children <- titanic_df[titanic_df$Age=="Child", ]
View(children)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
ticket_class = "2nd"
calc_survival_rate <- function(ticket_class){
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male",]
#View(adult_males)
}
View(adult_males)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male",]
View(adult_males)
View(given_ticket_class)
ticket_class = "2nd"
calc_survival_rate <- function(ticket_class){
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male",]
View(adult_males)
return("idk")
}
View(adult_males)
View(given_ticket_class)
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
View(given_ticket_class)
View(adult_males)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male",]
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
View(given_ticket_class)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male",]
View(adult_males)
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
ticket_class = "3rd"
calc_survival_rate <- function(ticket_class){
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" & given_ticket_class$Sex == "Male",]
View(adult_males)
return("idk")
}
View(given_ticket_class)
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" ,]
View(adult_males)
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
getwd()
View(children)
children <- titanic_df[titanic_df$Age=="Child", ]
View(children)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
children <- titanic_df[titanic_df$Age=="Child", ]
View(children)
children <- titanic_df[titanic_df$Age=="Child", ]
View(children)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
num_better_at_math <- nrow(ta_grades[ta_grades$math_grade>ta_grades$spanish_grade,])
print(num_better_at_math)
ta_grades[ta_grades$math_grade>4.0,2:3] <- 4.0
ta_grades[ta_grades$spanish_grade>4.0,2:3] <- 4.0
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
View(titanic_df)
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
View(titanic_df)
ticket_class = "3rd"
calc_survival_rate <- function(ticket_class){
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" ,]
View(adult_males)
return("idk")
calc_survival_rate <- function(ticket_class){
given_ticket_class <- titanic_df[titanic_df$Class == "ticket_class",]
View(given_ticket_class)
adult_males <- given_ticket_class[given_ticket_class$Age == "Adult" ,]
View(adult_males)
return("idk")
}
View(given_ticket_class)
View(given_ticket_class)
View(adult_males)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
View(adult_males)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
children <- titanic_df[titanic_df$Age=="Child", ]
View(children)
View(children)
View(given_ticket_class)
View(children)
print(children)
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
getwd
getwd()
setwd("~/Desktop/a3-using-data-dirkster98")
source('~/Desktop/a3-using-data-dirkster98/assignment.R')
grants <- read.csv("data/gates_money.csv", stringsAsFactors=FALSE)
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors=FALSE)
View(grants)
orgnization <- grants$organization
is.vector(organization)
is.vector(grant$organization)
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(grants$organization)
mean(grants$organization)
mean(grants[grabts$organization,"total_amount"])
mean(grants[grants$organization,"total_amount"])
mean(grants[grants$total_amount,])
mean(grants[,grants$total_amount])
# What was the mean grant value?
mean(grants[grants$total_amount,4])
print(mean_grant_val)
print(mean_grant_val)
source('~/Desktop/book-exercises/chapter-10-exercises/exercise-4/exercise.R')
